generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Movie {
  id             Int        @id @default(autoincrement())
  user_created   String?    @db.Uuid
  date_created   DateTime?  @db.Timestamptz(6)
  name           String     @unique(map: "movie_name_unique") @db.VarChar(255)
  start_year     Int?
  end_year       Int
  other_info     Json       @default("{}") @db.Json
  admin_accepted Boolean?   @default(false)
  poster         String?    @db.Uuid
  User           User?      @relation(fields: [user_created], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "movie_user_created_foreign")
  MovieFav       MovieFav[]
}

model MovieFav {
  id       Int     @id @default(autoincrement())
  Movie_id Int?
  user_id  String? @db.Uuid
  Movie    Movie?  @relation(fields: [Movie_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "moviefav_movie_id_foreign")
  User     User?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "moviefav_user_id_foreign")
}

model User {
  id             String     @id(map: "directus_users_pkey") @default(uuid()) @db.Uuid
  first_name     String?    @db.VarChar(50)
  last_name      String?    @db.VarChar(50)
  email          String?    @unique(map: "directus_users_email_unique") @db.VarChar(128)
  password       String?    @db.VarChar(255)
  location       String?    @db.VarChar(255)
  description    String?
  tags           Json?      @db.Json
  avatar         String?    @db.VarChar
  language       String?    @db.VarChar(255)
  username       String     @unique(map: "directus_users_username_unique") @db.VarChar(255)
  email_verified Boolean?   @default(false)
  Movie          Movie[]
  MovieFav       MovieFav[]
}
